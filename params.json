{"name":"Burger","tagline":"A simple tool for picking out information from the minecraft JARs, primarily useful for developers.","body":"**NOTE: This page is really only used to host one of the results.  See [b.wiki.vg](//b.wiki.vg) for older results.**\r\n\r\n# Burger\r\nBurger is a tiny \"framework\" for automatically extracting data\r\nfrom the minecraft game for the purpose of writing the protocol\r\nspecification, interoperability, and other neat uses.\r\n\r\n## The Idea\r\nBurger is made up of *toppings*, which can provide and satisfy\r\nsimple dependencies, and which can be run all-together or just\r\na few specifically. Each topping is then aggregated by\r\n`munch.py` into the whole and output as a JSON dictionary.\r\n\r\n## Usage\r\nThe simplest way to use Burger is to pass the `-d` or `--download`\r\nflag, which will download the minecraft client for you.\r\n\r\n    $ python munch.py --download\r\n\r\nAlternatively, you can specify either the client or the server\r\nJAR by passing it as an argument.\r\n\r\n    $ python munch.py minecraft_server.jar\r\n\r\nWe can redirect the output from the default `stdout` by passing\r\n`-o <path>` or `--output <path>`.\r\n    \r\n    $ python munch.py -d --output output.json\r\n\r\nWe can see what toppings are available by passing `-l` or `--list`.\r\n\r\n    $ python munch.py --list\r\n\r\nWe can also run specific toppings by passing a comma-delimited list\r\nto `-t` or `--toppings`. If a topping cannot be used because it's\r\nmissing a dependency, it will output an error telling you what \r\nalso needs to be included.\r\n\r\n    $ python munch.py -d --toppings language,stats\r\n\r\nThe above example would only extract the language information, as\r\nwell as the stats and achievements (both part of `stats`).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}